package poly.ex5;

/*
클래스, 추상 클래스, 인터페이스는 모두 똑같다.
- 클래스, 추상클래스, 인터페이스는 프로그램 코드, 메모리 구조상 모두 똑같다. 모두 자바에서는 .class로 다루어 진다. 인터페이스를 작성할 때도 .java에 인터페이스를 정의한다.
- 인터페이스는 순수 추상 클래스와 비슷하다고 생각하면 된다.

상속 VS 구현
부모클래스의 기능을 자식 클래스가 상속 받을 때, 클래스는 상속 받는다고 표현하지만, 부모 인터페이스의 기능을 자식이 상속 받을 때는 인터페이스를 구현한다고 표현.
이렇게 서로 다르게 표현하는 이유는, 상속은 이름 그대로 부모의 기능을 물려받는 것이 목적이고 인터페이스는 모든 메서드가 추상 메서드이기 때문에 물려받을 수 있는 기능이 없고, 오히려 정의한 모든 메서드를 자식이 오버라이딩 해서 기능을 구현해야 한다.
인터페이스는 메서드 이름만 있는 설계도이고, 이 설계도가 실제 어떻게 작동하는지는 하위 클래스에서 모두 구현

인터페이스를 사용해야 하는 이유
모든 메서드가 추상 메서드인 경우 순수 추상 클래스를 만들어도 되고, 인터페이스를 만들어도 된다. 이유는 다음과 같다.
- 제약: 인터페이스를 만드는 이유는 인터페이스를 구현하는 곳애서 인터페이스의 메서드를 반드시 구현해 라는 규약을 주는 것
       순수 추상 클래사의 경우 실행 가능한 메서드를 누군가 끼워 넣을 수 있고 그렇다고 하면 더이상 순수 추상 클래스가 아니게 된다. 이런 문제를 원천 차단하기 위해 인터페이스를 사용한다.
- 다중 구현: 자바에서 클래스 상속은 부모를 하나만 지정할 수 있다. 반면에 인터페이스는 부모를 여러명 두는 다중구현이 가능하다.

좋은 프로그램은 제약이 있는 프로그램.

참고
자바8에 등장한 default 키워드를 사용하면 인터페이스에서도 메서드를 구현할 수 있다.
예외적으로 아주 특별한 경우에만 사용해야 한다.
자바9에 등장한 인터페이스의 private 도 마찬가지.
 */
public class InterfaceMain {
    public static void main(String[] args) {
//        InterfaceAnimal animal = new InterfaceAnimal(); // 인터페이스 생성 불가
        Cat cat = new Cat();
        Dog dog = new Dog();
        Cow cow = new Cow();

        soundAnimal(cat);
        soundAnimal(dog);
        soundAnimal(cow);

    }

    private static void soundAnimal(InterfaceAnimal animal) {
        System.out.println("동물 소리 테스트 시작");
        animal.sound();
        System.out.println("동물 소리 테스트 종료");
    }
}
